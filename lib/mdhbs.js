// Generated by CoffeeScript 1.4.0
(function() {
  var async, baseViews, compileTemplate, fileFilter, filelet, fs, funclet, handlebars, isAbsolute, isFunction, item, loadTemplateHelper, loadTemplates, loglet, marked, monitors, path, registerHelpers, render, renderFile, renderKey, renderLayout, renderRelKey, templateChanged, templateCreated, templateEvent, watch, _, _renderFile;

  marked = require('marked');

  handlebars = require('handlebars');

  fs = require('fs');

  _ = require('underscore');

  path = require('path');

  loglet = require('loglet');

  funclet = require('funclet');

  filelet = require('filelet');

  watch = require('watch');

  async = require('async');

  isFunction = function(v) {
    return typeof v === 'function' || v instanceof Function;
  };

  registerHelpers = function(helpers, scope) {
    var key, name, val, _results;
    if (scope == null) {
      scope = helpers.name;
    }
    _results = [];
    for (key in helpers) {
      val = helpers[key];
      if (helpers.hasOwnProperty(key) && isFunction(val)) {
        name = "" + scope + ":" + key;
        _results.push(handlebars.registerHelper(name, val));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  handlebars.registerHelper('ifCond', function(v1, operator, v2, options) {
    switch (operator) {
      case '==':
      case '===':
        if (v1 === v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '<':
        if (v1 < v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '<=':
        if (v1 <= v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '>':
        if (v1 > v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '>=':
        if (v1 >= v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '&&':
        if (v1 && v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '||':
        if (v1 || v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      default:
        return options.inverse(this);
    }
  });

  handlebars.registerHelper('json', function(v) {
    return JSON.stringify(v);
  });

  handlebars.registerHelper('showError', function(e) {
    return JSON.stringify(e);
  });

  compileTemplate = function(filePath, data, cb) {
    var ext, inner, template, templateName;
    try {
      ext = path.extname(filePath);
      templateName = path.join(path.dirname(filePath), path.basename(filePath, ext));
      template = ext === '.md' ? (inner = handlebars.compile(data), function(obj) {
        return marked(inner(obj));
      }) : handlebars.compile(data);
      handlebars.registerPartial(templateName, template);
      return cb(null);
    } catch (e) {
      return cb(e);
    }
  };

  loadTemplates = function(rootPath, options, cb) {
    var helper, watchOptions;
    if (arguments.length === 2) {
      cb = options;
      options = {
        filter: ['.md', '.hbs', '.js', '.coffee']
      };
    }
    helper = function(filePath, next) {
      return funclet.start(function(next) {
        return fs.readFile(path.join(rootPath, filePath), 'utf8', next);
      }).then(function(data, next) {
        return compileTemplate(filePath, data, next);
      })["catch"](next).done(function() {
        return next(null);
      });
    };
    watchOptions = {
      ignoreUnreadableDir: true,
      filter: function(filePath, stat) {
        return stat.isFile() && _.find(options.filter, path.extname(filePath));
      }
    };
    return funclet.start(function(next) {
      return filelet.readdirR(rootPath, options, next);
    }).thenEach(helper)["catch"](cb).done(function() {
      return cb(null);
    });
  };

  renderRelKey = function(filePath) {
    return path.join(path.dirname(filePath), path.basename(filePath, path.extname(filePath)));
  };

  renderLayout = function(body, options, cb) {
    var data, layoutKey, layoutTemplate;
    if (options.layout) {
      layoutKey = renderRelKey(options.layout);
      if (handlebars.partials.hasOwnProperty(layoutKey)) {
        layoutTemplate = handlebars.partials[layoutKey];
        data = _.extend({}, options, {
          body: body
        });
        return cb(null, layoutTemplate(data));
      } else {
        return cb(null, body);
      }
    } else {
      return cb(null, body);
    }
  };

  render = function(key, options, cb) {
    var body, template;
    if (handlebars.partials.hasOwnProperty(key)) {
      try {
        template = handlebars.partials[key];
        body = template(options);
        return renderLayout(body, options, cb);
      } catch (e) {
        return cb(e);
      }
    } else {
      return cb({
        error: 'unknown_render_template',
        value: key
      });
    }
  };

  renderKey = function(filePath, basePath) {
    var base, helper, _i, _len;
    helper = function(basePath) {
      return renderRelKey(path.relative(basePath, filePath));
    };
    if (basePath instanceof Array) {
      for (_i = 0, _len = basePath.length; _i < _len; _i++) {
        base = basePath[_i];
        if (filePath.indexOf(base) === 0) {
          return helper(base);
        }
      }
    } else {
      return helper(basePath);
    }
  };

  fileFilter = function(filePath, stat) {
    var ext;
    ext = path.extname(filePath);
    return stat.isDirectory() || ext === '.md' || ext === '.hbs' || ext === '.js' || ext === '.coffee';
  };

  monitors = [];

  templateEvent = function(rootPath, type) {
    return function(filePath, stat) {
      if (stat.isFile()) {
        loglet.log("file." + type, filePath);
        return fs.readFile(filePath, 'utf8', function(err, data) {
          var normalized;
          if (err) {
            return loglet.error("file." + type + ".error", err);
          } else {
            normalized = path.relative(rootPath, filePath);
            return compileTemplate(normalized, data, function(err) {
              if (err) {
                return loglet.error("loadTemplate.error", normalized, err);
              }
            });
          }
        });
      }
    };
  };

  templateCreated = function(filePath, stat) {
    return loglet.log('file.created', filePath, stat);
  };

  templateChanged = function(filePath, stat) {
    return loglet.log('file.changed', filePath, stat);
  };

  loadTemplateHelper = function(rootPath, cb) {
    return fs.stat(rootPath, function(err, stat) {
      if (err) {
        return cb(null);
      } else {
        return funclet.bind(loadTemplates, rootPath).then(function(next) {
          return watch.createMonitor(rootPath, {
            filter: fileFilter
          }, function(monitor) {
            monitors.push(monitor);
            monitor.on('created', templateEvent(rootPath, 'created'));
            monitor.on('changed', templateEvent(rootPath, 'changed'));
            return next(null);
          });
        })["catch"](cb).done(function() {
          return cb(null);
        });
      }
    });
  };

  baseViews = (function() {
    var _i, _len, _ref, _results;
    _ref = ['views', 'template'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _results.push(path.join(process.cwd(), item));
    }
    return _results;
  })();

  _renderFile = function(filePath, options, cb) {
    var key, rootPaths, _ref, _ref1;
    key = renderKey(filePath, (options != null ? (_ref = options.settings) != null ? _ref.views : void 0 : void 0) || baseViews);
    if (handlebars.partials.hasOwnProperty(key)) {
      return render(key, options, cb);
    } else if (path.extname(filePath) === '.html') {
      return fs.readFile(filePath, 'utf8', function(err, body) {
        if (err) {
          return cb(err);
        } else {
          return renderLayout(body, options, cb);
        }
      });
    } else {
      rootPaths = (options != null ? (_ref1 = options.settings) != null ? _ref1.views : void 0 : void 0) || baseViews;
      return funclet.each(rootPaths, loadTemplateHelper)["catch"](cb).done(function() {
        return render(key, options, cb);
      });
    }
  };

  isAbsolute = function(filePath) {
    return filePath.indexOf('/') === 0;
  };

  renderFile = function(filePath, options, cb) {
    var base;
    if (isAbsolute(filePath)) {
      return _renderFile(filePath, options, cb);
    } else {
      return async.detect((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref1 = (options != null ? (_ref = options.settings) != null ? _ref.views : void 0 : void 0) || baseViews;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          base = _ref1[_i];
          _results.push(path.join(base, filePath));
        }
        return _results;
      })(), fs.exists, function(fullPath) {
        if (!fullPath) {
          return cb({
            error: 'unknown_render_template',
            path: filePath
          });
        } else {
          return _renderFile(fullPath, options, cb);
        }
      });
    }
  };

  module.exports = {
    loadTemplates: loadTemplates,
    handlebars: handlebars,
    __express: renderFile,
    renderFile: renderFile,
    registerHelpers: registerHelpers
  };

}).call(this);
