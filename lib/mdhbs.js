// Generated by CoffeeScript 1.10.0
(function() {
  var _, _renderFile, async, baseViews, compileTemplate, fileCache, fileFilter, filelet, fs, funclet, handlebars, isAbsolute, isFunction, item, loadFileSync, loadTemplateHelper, loadTemplates, loglet, marked, mockquery, monitors, newRenderer, parseMarkdown, path, registerHelper, registerHelpers, render, renderFile, renderHTML, renderKey, renderLayout, renderParagraph, renderRelKey, templateChanged, templateCreated, templateEvent, watch,
    slice = [].slice;

  marked = require('marked');

  handlebars = require('handlebars');

  fs = require('fs');

  _ = require('underscore');

  path = require('path');

  loglet = require('loglet');

  funclet = require('funclet');

  filelet = require('filelet');

  watch = require('watch');

  async = require('async');

  mockquery = require('mockquery');

  isFunction = function(v) {
    return typeof v === 'function' || v instanceof Function;
  };

  registerHelpers = function(helpers, scope) {
    var key, name, results, val;
    if (scope == null) {
      scope = helpers.name;
    }
    results = [];
    for (key in helpers) {
      val = helpers[key];
      if (helpers.hasOwnProperty(key) && isFunction(val)) {
        name = scope + ":" + key;
        results.push(registerHelper(name, val));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  registerHelper = function(name, proc) {
    return handlebars.registerHelper(name, proc);
  };

  registerHelper('ifCond', function(v1, operator, v2, options) {
    switch (operator) {
      case '==':
      case '===':
        if (v1 === v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '<':
        if (v1 < v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '<=':
        if (v1 <= v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '>':
        if (v1 > v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '>=':
        if (v1 >= v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '&&':
        if (v1 && v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      case '||':
        if (v1 || v2) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      default:
        return options.inverse(this);
    }
  });

  registerHelper('errorMessage', function(context, options) {
    var ref, ref1, ref2;
    console.log(' -- iferror', context, options);
    if ((options != null ? (ref = options.data) != null ? (ref1 = ref.root) != null ? (ref2 = ref1.error) != null ? ref2.errors : void 0 : void 0 : void 0 : void 0) && options.data.root.error.errors.hasOwnProperty(context)) {
      return new handlebars.SafeString(options.data.root.error.errors[context]);
    } else {
      return new handlebars.SafeString("");
    }
  });

  registerHelper('json', function(v) {
    return JSON.stringify(v);
  });

  registerHelper('showError', function(e) {
    return JSON.stringify(e);
  });

  registerHelper('coalesce', function() {
    var arg, args, j, len;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    for (j = 0, len = args.length; j < len; j++) {
      arg = args[j];
      if (arg) {
        return arg;
      }
    }
  });

  registerHelper('toggle', function(cond, ifTrue, ifFalse) {
    if (cond) {
      return ifTrue;
    } else {
      return ifFalse;
    }
  });

  fileCache = {};

  renderParagraph = function(renderer) {
    var dropcapRE, notInParaRE;
    dropcapRE = /^\s*<span\s+class\s*=\s"dropcap"*/i;
    notInParaRE = /^\s*<\s*(figure|caption|table|thead|th|tr|td|ul|ol|address|article|aside|audio|blockquote|dd|div|dl|fieldset|footer|form|h1|h2|h3|h4|h5|h6|header|footer|hr|main|nav|noscript|p|pre|section|video)/i;
    return function(text) {
      console.log('--renderPara', text, text.match(dropcapRE), text.match(notInParaRE));
      if (text.match(dropcapRE)) {
        return text;
      } else if (text.match(notInParaRE)) {
        return text;
      } else {
        return "<p>" + text + "</p>";
      }
    };
  };

  renderHTML = function(renderer, options) {
    var tableCount, tablePrefix;
    tableCount = 0;
    tablePrefix = function() {
      if ((options != null ? options.prefix : void 0) && (options != null ? options.number : void 0)) {
        tableCount++;
        return options.prefix + " " + options.number + "." + tableCount + " - ";
      } else {
        return '';
      }
    };
    return function(html) {
      var $;
      $ = mockquery.load('<root>' + html + '</root>');
      $('[markdown="1"]').each(function(i, elt) {
        var inner, rendered;
        $(elt).removeAttr('markdown');
        inner = elt.html();
        rendered = marked(inner, {
          renderer: renderer
        });
        return elt.html(rendered);
      });
      $('table').each(function(i, elt) {
        var captions;
        $(elt).addClass('table');
        captions = $('caption', elt);
        if (captions.length > 1) {
          return captions.each(function(i, elt) {
            if (i === 0) {
              return $(elt).prepend(tablePrefix());
            } else {
              return $(elt).remove();
            }
          });
        }
      });
      return $('root').html();
    };
  };

  newRenderer = function(filePath, data) {
    var renderer;
    renderer = new marked.Renderer();
    renderer.paragraph = renderParagraph(renderer);
    renderer.html = renderHTML(renderer);
    return renderer;
  };

  parseMarkdown = function(filePath, data) {
    var content;
    return content = marked(data, {
      renderer: newRenderer(filePath, data)
    });
  };

  loadFileSync = function(filePath, resolvedPath, stat) {
    var data, parsed;
    console.log('------ load.file', filePath, resolvedPath);
    data = fs.readFileSync(resolvedPath, 'utf8');
    console.log('------ load.file.data', data);
    parsed = parseMarkdown(filePath, data);
    fileCache[filePath] = {
      mtime: stat.mtime,
      fullPath: resolvedPath,
      parsed: parsed
    };
    return parsed;
  };

  registerHelper('loadSync', function(filePath) {
    var resolvedPath, stat;
    resolvedPath = path.join(process.cwd(), filePath);
    stat = fs.statSync(resolvedPath);
    if (fileCache.hasOwnProperty(filePath)) {
      if (fileCache[filePath].mtime < stat.mtime) {
        return loadFileSync(filePath, resolvedPath, stat);
      } else {
        return fileCache[filePath].parsed;
      }
    } else {
      return loadFileSync(filePath, resolvedPath, stat);
    }
  });

  compileTemplate = function(filePath, data, cb) {
    var e, error, ext, inner, template, templateName;
    try {
      ext = path.extname(filePath);
      templateName = path.join(path.dirname(filePath), path.basename(filePath, ext));
      template = ext === '.md' ? (inner = handlebars.compile(data), function(obj) {
        return marked(inner(obj));
      }) : handlebars.compile(data);
      handlebars.registerPartial(templateName, template);
      return cb(null);
    } catch (error) {
      e = error;
      return cb(e);
    }
  };

  loadTemplates = function(rootPath, options, cb) {
    var helper, watchOptions;
    if (arguments.length === 2) {
      cb = options;
      options = {
        filter: ['.md', '.hbs', '.js', '.coffee']
      };
    }
    helper = function(filePath, next) {
      return funclet.start(function(next) {
        return fs.readFile(path.join(rootPath, filePath), 'utf8', next);
      }).then(function(data, next) {
        return compileTemplate(filePath, data, next);
      })["catch"](next).done(function() {
        return next(null);
      });
    };
    watchOptions = {
      ignoreUnreadableDir: true,
      filter: function(filePath, stat) {
        return stat.isFile() && _.find(options.filter, path.extname(filePath));
      }
    };
    return funclet.start(function(next) {
      return filelet.readdirR(rootPath, options, next);
    }).thenEach(helper)["catch"](cb).done(function() {
      return cb(null);
    });
  };

  renderRelKey = function(filePath) {
    return path.join(path.dirname(filePath), path.basename(filePath, path.extname(filePath)));
  };

  renderLayout = function(body, options, cb) {
    var data, layoutKey, layoutTemplate;
    if (options.layout) {
      layoutKey = renderRelKey(options.layout);
      if (handlebars.partials.hasOwnProperty(layoutKey)) {
        layoutTemplate = handlebars.partials[layoutKey];
        data = _.extend({}, options, {
          body: body
        });
        return cb(null, layoutTemplate(data));
      } else {
        return cb(null, body);
      }
    } else {
      return cb(null, body);
    }
  };

  render = function(key, options, cb) {
    var body, e, error, template;
    if (handlebars.partials.hasOwnProperty(key)) {
      try {
        template = handlebars.partials[key];
        body = template(options);
        return renderLayout(body, options, cb);
      } catch (error) {
        e = error;
        return cb(e);
      }
    } else {
      return cb({
        error: 'unknown_render_template',
        value: key
      });
    }
  };

  renderKey = function(filePath, basePath) {
    var base, helper, j, len;
    helper = function(basePath) {
      return renderRelKey(path.relative(basePath, filePath));
    };
    if (basePath instanceof Array) {
      for (j = 0, len = basePath.length; j < len; j++) {
        base = basePath[j];
        if (filePath.indexOf(base) === 0) {
          return helper(base);
        }
      }
    } else {
      return helper(basePath);
    }
  };

  fileFilter = function(filePath, stat) {
    var ext;
    ext = path.extname(filePath);
    return stat.isDirectory() || ext === '.md' || ext === '.hbs' || ext === '.js' || ext === '.coffee';
  };

  monitors = [];

  templateEvent = function(rootPath, type) {
    return function(filePath, stat) {
      if (stat.isFile()) {
        loglet.log("file." + type, filePath);
        return fs.readFile(filePath, 'utf8', function(err, data) {
          var normalized;
          if (err) {
            return loglet.error("file." + type + ".error", err);
          } else {
            normalized = path.relative(rootPath, filePath);
            return compileTemplate(normalized, data, function(err) {
              if (err) {
                return loglet.error("loadTemplate.error", normalized, err);
              }
            });
          }
        });
      }
    };
  };

  templateCreated = function(filePath, stat) {
    return loglet.log('file.created', filePath, stat);
  };

  templateChanged = function(filePath, stat) {
    return loglet.log('file.changed', filePath, stat);
  };

  loadTemplateHelper = function(rootPath, cb) {
    return fs.stat(rootPath, function(err, stat) {
      if (err) {
        return cb(null);
      } else {
        return funclet.bind(loadTemplates, rootPath).then(function(next) {
          return watch.createMonitor(rootPath, {
            filter: fileFilter
          }, function(monitor) {
            monitors.push(monitor);
            monitor.on('created', templateEvent(rootPath, 'created'));
            monitor.on('changed', templateEvent(rootPath, 'changed'));
            return next(null);
          });
        })["catch"](cb).done(function() {
          return cb(null);
        });
      }
    });
  };

  baseViews = (function() {
    var j, len, ref, results;
    ref = ['views', 'template'];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      results.push(path.join(process.cwd(), item));
    }
    return results;
  })();

  _renderFile = function(filePath, options, cb) {
    var key, ref, ref1, rootPaths;
    key = renderKey(filePath, (options != null ? (ref = options.settings) != null ? ref.views : void 0 : void 0) || baseViews);
    if (handlebars.partials.hasOwnProperty(key)) {
      return render(key, options, cb);
    } else if (path.extname(filePath) === '.html') {
      return fs.readFile(filePath, 'utf8', function(err, body) {
        if (err) {
          return cb(err);
        } else {
          return renderLayout(body, options, cb);
        }
      });
    } else {
      rootPaths = (options != null ? (ref1 = options.settings) != null ? ref1.views : void 0 : void 0) || baseViews;
      return funclet.each(rootPaths, loadTemplateHelper)["catch"](cb).done(function() {
        return render(key, options, cb);
      });
    }
  };

  isAbsolute = function(filePath) {
    return filePath.indexOf('/') === 0;
  };

  renderFile = function(filePath, options, cb) {
    var base;
    if (isAbsolute(filePath)) {
      return _renderFile(filePath, options, cb);
    } else {
      return async.detect((function() {
        var j, len, ref, ref1, results;
        ref1 = (options != null ? (ref = options.settings) != null ? ref.views : void 0 : void 0) || baseViews;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          base = ref1[j];
          results.push(path.join(base, filePath));
        }
        return results;
      })(), fs.exists, function(fullPath) {
        if (!fullPath) {
          return cb({
            error: 'unknown_render_template',
            path: filePath
          });
        } else {
          return _renderFile(fullPath, options, cb);
        }
      });
    }
  };

  module.exports = {
    loadTemplates: loadTemplates,
    handlebars: handlebars,
    __express: renderFile,
    renderFile: renderFile,
    registerHelpers: registerHelpers,
    registerHelper: registerHelper
  };

}).call(this);
