// Generated by CoffeeScript 1.4.0
(function() {
  var baseErrorHandler, bean, bodyParser, cookieParser, cookieSession, express, extless, favicon, filelet, fs, http, https, initLastMiddlewares, initMiddlewares, initRoutes, localRequire, loglet, methodOverride, path, run, runWithConfig, session, setupSSL, signedSecret, uuid, _;

  http = require('http');

  https = require('https');

  express = require('express');

  cookieParser = require('cookie-parser');

  favicon = require('serve-favicon');

  bodyParser = require('body-parser');

  session = require('express-session');

  cookieSession = require('./session');

  methodOverride = require('method-override');

  extless = require('./extless');

  path = require('path');

  loglet = require('loglet');

  bean = require('coffee-bean');

  _ = require('underscore');

  fs = require('fs');

  filelet = require('filelet');

  uuid = require('node-uuid');

  baseErrorHandler = function(options) {
    return function(err, req, res, next) {
      var accept;
      loglet.error('REQUEST_ERROR', req.method, req.url, req.body, err);
      if (err.status) {
        res.statusCode = err.status;
      }
      if (err.statusCode < 400) {
        res.statusCode = 500;
      }
      console.error(err.stack);
      accept = req.headers.accept || '';
      return res.json(err.status, err);
    };
  };

  signedSecret = 'this-is-the-top-secret';

  localRequire = function(reqPath) {
    if (reqPath.match(/^[^\.\/]+$/)) {
      return require(path.join(config.BASE_DIR, 'node_modules', reqPath));
    } else {
      return require(path.join(config.BASE_DIR, reqPath));
    }
  };

  setupSSL = function(config, app) {
    var options;
    options = _.extend({}, config.https);
    options.key = fs.readFileSync(path.join(config.BASE_DIR, options.key || 'keys/server.key'));
    options.cert = fs.readFileSync(path.join(config.BASE_DIR, options.cert || 'keys/server.crt'));
    options.port = options.port || 4443;
    loglet.log('config.https', config.https);
    app.set('ssl', options);
    return https.createServer(options, app).listen(options.port);
  };

  runWithConfig = function(config) {
    var app, sessionConfig, _ref;
    loglet.setKeys(config.debug || []);
    app = express();
    app.addViews = function(viewsDir) {
      var views;
      views = app.get('views');
      views = views instanceof Array ? views : typeof views === 'string' ? [views] : [];
      views.unshift(viewsDir);
      return app.set('views', views);
    };
    app.set('url', config.url || 'http://localhost');
    app.set('port', config.port || 8080);
    app.set('view engine', config.views.engine || 'jade');
    app.addViews(path.join(config.BASE_DIR, config.views.dir || 'views'));
    app.use(cookieParser(((_ref = config.session) != null ? _ref.secret : void 0) || signedSecret));
    sessionConfig = {
      genid: function(req) {
        return uuid.v4();
      }
    };
    _.extend(sessionConfig, config.session || {});
    app.use(cookieSession(config.session));
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    app.use(methodOverride());
    app.use(express["static"](path.join(config.BASE_DIR, 'public')));
    initMiddlewares(app, config);
    initRoutes(app, config);
    app.use(extless());
    app.use(baseErrorHandler({
      showStack: true,
      dumpExceptions: true
    }));
    initLastMiddlewares(app, config);
    http.createServer(app).listen(app.get('port'));
    if (config.https) {
      setupSSL(config, app);
    }
    return loglet.debug('server.start', app.get('port'));
  };

  initRoutes = function(app, config) {
    var file, filePath, files, module, route, routesPath, _i, _len, _results;
    routesPath = path.join(config.BASE_DIR, 'routes');
    files = filelet.readdirRSync(routesPath);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      module = path.basename(file, path.extname(file));
      filePath = path.join(config.BASE_DIR, 'routes', module);
      route = require(filePath);
      _results.push(route.init(app, config, (module === 'index' ? '/' : "/" + module)));
    }
    return _results;
  };

  initMiddlewares = function(app, config) {
    var file, filePath, files, middleware, middlewarePath, module, _i, _len, _results;
    middlewarePath = path.join(config.BASE_DIR, 'middlewares');
    files = filelet.readdirRSync(middlewarePath);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      module = path.basename(file, path.extname(file));
      filePath = path.join(config.BASE_DIR, 'middlewares', module);
      middleware = require(filePath);
      _results.push(middleware.init(app, config));
    }
    return _results;
  };

  initLastMiddlewares = function(app, config) {
    var file, filePath, files, middleware, middlewarePath, module, _i, _len, _results;
    middlewarePath = path.join(config.BASE_DIR, 'server');
    files = filelet.readdirRSync(middlewarePath);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      module = path.basename(file, path.extname(file));
      filePath = path.join(config.BASE_DIR, 'server', module);
      middleware = require(filePath);
      _results.push(middleware.init(app, config));
    }
    return _results;
  };

  run = function(argv) {
    var BASE_DIR, config, configPath;
    try {
      BASE_DIR = process.cwd();
      console.log('path', BASE_DIR, 'tinyweb.yml', path.join(BASE_DIR, 'tinyweb.yml'));
      configPath = path.join(BASE_DIR, 'tinyweb.yml');
      loglet.debug('server.config', configPath);
      config = bean.readFileSync(configPath);
      config = _.extend(config, argv);
      config.BASE_DIR = BASE_DIR;
      return runWithConfig(config);
    } catch (err) {
      loglet.error('server.config:failed', {
        error: 'config_load_failed',
        path: configPath
      }, err);
      return process.exit();
    }
  };

  module.exports = {
    run: run
  };

}).call(this);
