// Generated by CoffeeScript 1.4.0
(function() {
  var Continuation, ContinuationTable, contCache, contCreate, contFinish, contHandle, contMatch, contSuspend, init, isInteger, isUUID, loglet, lruCache, merge, stateKeys, url, uuid, _;

  loglet = require('loglet');

  _ = require('underscore');

  url = require('url');

  lruCache = require('lru-cache');

  uuid = require('node-uuid');

  merge = function(obj, obj2) {
    var key, res, val;
    res = {};
    for (key in obj) {
      val = obj[key];
      res[key] = val;
    }
    for (key in obj2) {
      val = obj2[key];
      if (res.hasOwnProperty(key)) {
        if (res[key] instanceof Array) {
          if (obj2[key] instanceof Array) {
            res[key] = res[key].concat(obj2(key));
          } else {
            res[key].push(obj2[key]);
          }
        } else if (res[key] instanceof Object) {
          if (obj2[key] instanceof Object) {
            res[key] = merge(res[key], obj2[key]);
          } else {
            res[key] = merge(res[key], {
              _: obj2[key]
            });
          }
        } else {
          res[key] = [res[key], obj2[key]];
        }
      } else {
        res[key] = val;
      }
    }
    return res;
  };

  stateKeys = {
    "return": '*ret',
    "continue": '*cnt',
    prg: '*prg',
    layout: '*l',
    edit: '*edit'
  };

  Continuation = (function() {

    function Continuation(type, table, next) {
      this.type = type;
      this.table = table;
      this.next = next;
      this.table.push(this);
      this.id = this.table.length() - 1;
      this.url = "/*continue/" + this.table.id + "/" + this.id;
    }

    Continuation.prototype.dispose = function() {
      return delete this.table;
    };

    return Continuation;

  })();

  ContinuationTable = (function() {

    function ContinuationTable() {
      this.id = uuid.v4();
      this.table = [];
    }

    ContinuationTable.prototype.dispose = function() {
      var cont, _i, _len, _ref;
      _ref = this.table;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        cont.dispose();
      }
      return delete this.table;
    };

    ContinuationTable.prototype.push = function(cont) {
      return this.table.push(cont);
    };

    ContinuationTable.prototype.makeSuspend = function(next) {
      return new Continuation('suspend', this, next);
    };

    ContinuationTable.prototype.makeFinish = function(next) {
      return new Continuation('finish', this, next);
    };

    ContinuationTable.prototype.has = function(id) {
      return this.table.hasOwnProperty(id);
    };

    ContinuationTable.prototype.get = function(id) {
      return this.table[id];
    };

    ContinuationTable.prototype.del = function(id) {
      return delete this.table[id];
    };

    ContinuationTable.prototype.length = function() {
      return this.table.length;
    };

    return ContinuationTable;

  })();

  contCache = lruCache({
    max: 100000,
    maxAge: 60 * 60 * 1000,
    dispose: function(key, table) {
      return table.dispose();
    }
  });

  isUUID = function(str) {
    return str.match(/^[0-9a-zA-Z]{8}-?[0-9a-zA-Z]{4}-?[0-9a-zA-Z]{4}-?[0-9a-zA-Z]{4}-?[0-9a-zA-Z]{12}$/);
  };

  isInteger = function(str) {
    return str.match(/^[0-9]+$/);
  };

  contMatch = function(req) {
    var id, match, parsed, table;
    parsed = url.parse(req.url);
    match = parsed.pathname.split('/');
    if (match.length === 4 && match[1] === '*continue' && isUUID(match[2]) && isInteger(match[3])) {
      if (contCache.peek(match[2])) {
        table = contCache.get(match[2]);
        id = parseInt(match[3]);
        if (table.has(id)) {
          return table.get(id);
        } else {
          return null;
        }
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  contCreate = function() {
    var table;
    table = new ContinuationTable;
    contCache.set(table.id, table);
    return table;
  };

  contSuspend = function(res, next) {
    var table;
    if (res.cont) {
      return res.cont.table.makeSuspend(next);
    } else {
      table = contCreate();
      return table.makeSuspend(next);
    }
  };

  contFinish = function(res, next) {
    if (res.cont) {
      return res.cont.table.makeFinish(next);
    } else {
      throw new Error("not_in_a_continuation");
    }
  };

  contHandle = function(cont, req, res) {
    req.cont = cont;
    res.cont = cont;
    return cont.next(req, res);
  };

  init = function(app, config) {
    var isStateKey;
    app.set('_config', config);
    isStateKey = function(key) {
      var k, v;
      for (k in stateKeys) {
        v = stateKeys[k];
        if (key === v) {
          return true;
        }
      }
      return false;
    };
    return app.use(function(req, res, next) {
      var cont, key, normalizeRemoval, removal, removeDashKeys, val, _ref;
      res.setHeader('X-URL', req.url);
      req._data = merge(req.query, req.body);
      req.stateKeys = stateKeys;
      req.state = {};
      removal = {};
      normalizeRemoval = function(params) {
        var key, result, val;
        result = {};
        for (key in params) {
          val = params[key];
          if (key.indexOf('-') === 0) {
            removal[key.substring(1)] = true;
            result[key.substring(1)] = val;
          } else {
            result[key] = val;
          }
        }
        return result;
      };
      removeDashKeys = function(data) {
        var key, result, val;
        result = {};
        for (key in data) {
          val = data[key];
          if (!removal.hasOwnProperty(key)) {
            result[key] = val;
          }
        }
        loglet.log('removeDashKeys', data, removal, result);
        return result;
      };
      req.body = normalizeRemoval(req.body || {});
      req.query = normalizeRemoval(req.query || {});
      for (key in stateKeys) {
        val = stateKeys[key];
        if (req._data.hasOwnProperty(val)) {
          req.state[key] = req._data[val];
          delete req._data[val];
        }
      }
      _ref = req._data;
      for (key in _ref) {
        val = _ref[key];
        if (key.match(/^\*/)) {
          req.state[key.substring(1)] = val;
        }
      }
      res.suspendRender = function(view, options, next, reqOptions) {
        var cont, state;
        if (reqOptions == null) {
          reqOptions = {};
        }
        state = req.state;
        cont = contSuspend(res, function(req, res) {
          for (key in reqOptions) {
            val = reqOptions[key];
            if (req.hasOwnProperty(key)) {
              req[key] = _.extend(req[key], reqOptions);
            } else {
              req[key] = val;
            }
          }
          req.state = _.extend(state, req.state || {});
          return next(req, res);
        });
        options = _.extend(options, {
          url: cont.url
        });
        return res.render(view, options);
      };
      res.suspendRedirect = function(next, reqOptions) {
        var cont, state;
        if (reqOptions == null) {
          reqOptions = {};
        }
        state = req.state;
        cont = contSuspend(res, function(req, res) {
          for (key in reqOptions) {
            val = reqOptions[key];
            if (req.hasOwnProperty(key)) {
              req[key] = _.extend(req[key], val);
            } else {
              req[key] = val;
            }
          }
          req.state = _.extend(state, req.state || {});
          return next(req, res);
        });
        return res.redirect(cont.url);
      };
      res.finishRender = function(view, options, next, reqOptions) {
        var cont, state;
        if (reqOptions == null) {
          reqOptions = {};
        }
        state = req.state;
        cont = contFinish(res, function(req, res) {
          for (key in reqOptions) {
            val = reqOptions[key];
            if (req.hasOwnProperty(key)) {
              req[key] = _.extend(req[key], reqOptions);
            } else {
              req[key] = val;
            }
          }
          req.state = _.extend(state, req.state || {});
          return next;
        });
        options = _.extend(options, {
          url: cont.url
        });
        return res.render(view, options);
      };
      res.genURL = function(uri, data, stateFilter) {
        var parsed, state, _ref1;
        if (data == null) {
          data = {};
        }
        if (stateFilter == null) {
          stateFilter = {};
        }
        state = {};
        _ref1 = req.state;
        for (key in _ref1) {
          val = _ref1[key];
          if (!stateFilter.hasOwnProperty(key) || !stateFilter[key] === false) {
            state[stateKeys[key]] = val;
          }
        }
        parsed = url.parse(uri);
        parsed.query || (parsed.query = {});
        _.extend(parsed.query, state, removeDashKeys(data));
        return url.format(parsed);
      };
      res.error = function(e) {
        var obj;
        obj = _.extend({}, e);
        if (e instanceof Error) {
          obj.message = e.message;
        }
        return res.status(e.statusCode || e.code || 500).json(e);
      };
      res.notFound = function(e) {
        loglet.log('res.notFound', e);
        res._error = e;
        res.status(404);
        return next(null);
      };
      res.internalError = function(e) {
        loglet.log('res.error', e);
        res._error = e;
        res.status(500);
        return next(null);
      };
      res.requireAuth = function(e) {
        loglet.log('res.error', e);
        res._error = e;
        res.status(401);
        return next(null);
      };
      res.goto = function(uri, obj) {
        if (obj == null) {
          obj = {};
        }
        uri = res.genURL(uri, obj, {
          "continue": false
        });
        return res.redirect(uri);
      };
      res.clientRedirect = function(uri) {
        var content;
        res.setHeader('X-CLIENT-REDIRECT', uri);
        content = "<html>\n  <body onload=\"window.location = '" + uri + "'\">\n    <noscript>\n      <meta http-equiv=\"refresh\" content=\"0; url=" + uri + "\" />\n    </noscript>\n  </body>\n</html>";
        return res.send(content);
      };
      res.result = function(obj) {
        if (obj == null) {
          obj = {};
        }
        if (req.state["continue"]) {
          try {
            return res.goto(req.state["continue"], obj);
          } catch (e) {
            loglet.error('res.result.continue.error', req.url, e);
            return res.error(e);
          }
        } else {
          return res.status(200).json(obj);
        }
      };
      res._render = res.render;
      res.render = function(viewName, options) {
        var data;
        data = _.extend({
          user: req.user,
          error: req._error
        }, config, options, req.state);
        return res._render(viewName, data);
      };
      res.renderFile = function(filePath, options) {
        return res.render(filePath, options);
      };
      req.getData = function(key) {
        if (req.body.hasOwnProperty(key)) {
          return req.body[key];
        } else {
          return req.query[key];
        }
      };
      cont = contMatch(req);
      if (cont instanceof Continuation) {
        return contHandle(cont, req, res);
      } else {
        return next(null);
      }
    });
  };

  module.exports = {
    init: init
  };

}).call(this);
